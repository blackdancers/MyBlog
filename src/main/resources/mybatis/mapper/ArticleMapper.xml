<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.fish.blog.core.dao.ArticleMapper">
  <resultMap id="BaseResultMap" type="com.github.fish.blog.api.entity.Article">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="article_name" jdbcType="VARCHAR" property="articleName" />
    <result column="article_cover" jdbcType="VARCHAR" property="articleCover" />
    <result column="article_flag" jdbcType="VARCHAR" property="articleFlag" />
    <result column="views" jdbcType="INTEGER" property="views" />
    <result column="appreciation" jdbcType="CHAR" property="appreciation" />
    <result column="share_statement" jdbcType="CHAR" property="shareStatement" />
    <result column="is_comment" jdbcType="CHAR" property="isComment" />
    <result column="is_issue" jdbcType="CHAR" property="isIssue" />
    <result column="is_recommend" jdbcType="CHAR" property="isRecommend" />
    <result column="article_content" jdbcType="LONGVARCHAR" property="articleContent" />
    <result column="class_id" jdbcType="BIGINT" property="classId" />
    <result column="article_blurb" jdbcType="VARCHAR" property="articleBlurb" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
  </resultMap>
  <sql id="Base_Column_List">
    id, article_name, article_cover, article_flag, views, appreciation, share_statement,
    is_comment, is_issue, is_recommend,article_content, class_id,article_blurb, user_id, create_date, update_date
  </sql>

  <select id="getArticlePageBySearch" resultType="com.github.fish.blog.api.entity.Article">
    SELECT a.id,a.article_name AS articleName,a.is_recommend AS isRecommend,
    a.is_issue AS isIssue,a.update_date AS updateDate,cc.class_name AS className
    FROM article a
    LEFT JOIN classification cc ON cc.id = a.class_id
    <where>
      <if test="article.articleName != null and article.articleName != ''">
        AND a.article_name LIKE CONCAT('%', #{article.articleName}, '%')
      </if>
      <if test="article.classId != null and article.classId != ''">
        AND a.class_id = #{article.classId}
      </if>
      <if test="article.isRecommend != null and article.isRecommend != ''">
        AND a.is_recommend = #{article.isRecommend}
      </if>
    </where>
    ORDER BY a.update_date DESC
  </select>


  <select id="getArticleListByPage" resultType="com.github.fish.blog.api.entity.Article">
    SELECT
    a.id,
    a.article_name articleName,
    a.article_cover articleCover,
    a.article_flag articleFlag,
    a.views,
    a.appreciation,
    a.share_statement shareStatement,
    a.is_comment isComment,
    a.is_issue isIssue,
    a.is_recommend isRecommend,
    a.article_content articleContent,
    a.class_id classId,
    a.article_blurb articleBlurb,
    a.user_id userId,
    a.create_date createDate,
    a.update_date updateDate,
    su.user_name userName,
    su.user_avatar userAvatar,
    cc.class_name className
    FROM article a
    LEFT JOIN system_user su ON su.id = a.user_id
    LEFT JOIN classification cc ON cc.id = a.class_id
    ORDER BY a.update_date DESC
  </select>

  <select id="getArticleByName" resultType="java.lang.Boolean">
    SELECT EXISTS(SELECT 1 FROM article WHERE article_name=#{articleName})
  </select>

  <select id="getArticleList" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM article a WHERE a.is_recommend = #{article.isRecommend}  LIMIT #{num}
  </select>

</mapper>